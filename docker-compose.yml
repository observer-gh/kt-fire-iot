services:
  # Infrastructure Services (start first)
  postgres-datalake:
    image: postgres:16-alpine
    container_name: fire-iot-postgres-datalake
    environment:
      POSTGRES_DB: datalake
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_datalake_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d datalake"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fire-iot-network

  postgres-facilitymanagement:
    image: postgres:16-alpine
    container_name: fire-iot-postgres-facilitymanagement
    environment:
      POSTGRES_DB: facilitymanagement
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5435:5432"
    volumes:
      - postgres_facilitymanagement_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d facilitymanagement"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fire-iot-network

  redis:
    image: redis:7-alpine
    container_name: fire-iot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fire-iot-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: fire-iot-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fire-iot-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: fire-iot-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    healthcheck:
      test:
        ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fire-iot-network

  # Admin UIs (optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: fire-iot-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - fire-iot-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fire-iot-pgadmin
    depends_on:
      postgres-datalake:
        condition: service_healthy
      postgres-facilitymanagement:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@fireiot.local
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8091:80"
    networks:
      - fire-iot-network

  # Backend Services (start after infrastructure)
  datalake-api:
    build:
      context: ./services/datalake
      dockerfile: Dockerfile.api
    container_name: fire-iot-datalake-api
    depends_on:
      kafka:
        condition: service_healthy
      postgres-datalake:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8084:8080"
    environment:
      # Environment Profile
      - PROFILE=local
      # Database Configuration
      - POSTGRES_URL=postgresql://postgres:postgres@postgres-datalake:5432/datalake
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres-datalake
      - POSTGRES_PORT=5432
      - POSTGRES_DB=datalake
      # Redis Configuration
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Kafka Configuration (Local)
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC_ANOMALY=fire-iot.sensorDataAnomalyDetected
      - KAFKA_TOPIC_DATA_SAVED=fire-iot.sensorDataSaved
      - KAFKA_TOPIC_SENSOR_DATA=fire-iot.sensor-data
      # Storage Configuration
      - STORAGE_TYPE=mock
      - BATCH_SIZE=100
      - BATCH_INTERVAL_MINUTES=10
      - STORAGE_PATH=/app/local_storage
      # Service Configuration
      - SERVICE_PORT=8080
      - SERVICE_HOST=0.0.0.0
      - WEBSITES_PORT=8080
      # Logging and Monitoring
      - LOG_LEVEL=INFO
    volumes:
      - datalake_storage:/app/local_storage
    networks:
      - fire-iot-network

  datalake-dashboard:
    build:
      context: ./services/datalake
      dockerfile: Dockerfile.dashboard
    container_name: fire-iot-datalake-dashboard
    depends_on:
      postgres-datalake:
        condition: service_healthy
      datalake-api:
        condition: service_started
    ports:
      - "8501:8501"
    environment:
      # Environment Profile
      - PROFILE=local
      # Database Configuration
      - POSTGRES_URL=postgresql://postgres:postgres@postgres-datalake:5432/datalake
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres-datalake
      - POSTGRES_PORT=5432
      - POSTGRES_DB=datalake
      # API Service Configuration
      - DATALAKE_API_URL=http://datalake-api:8080
      - DATALAKE_API_HOST=datalake-api
      - DATALAKE_API_PORT=8080
      # Dashboard Configuration
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - WEBSITES_PORT=8501
      # Redis Configuration (for caching)
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Logging and Monitoring
      - LOG_LEVEL=INFO
    volumes:
      - datalake_storage:/app/local_storage
    networks:
      - fire-iot-network

  controltower:
    build: ./services/controltower
    container_name: fire-iot-controltower
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8082:8080"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - fire-iot-network

  facilitymanagement:
    build: ./services/facilitymanagement
    container_name: fire-iot-facilitymanagement
    depends_on:
      postgres-facilitymanagement:
        condition: service_healthy
    ports:
      - "8083:8080"
    environment:
      - POSTGRES_URL=jdbc:postgresql://postgres-facilitymanagement:5432/facilitymanagement
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - fire-iot-network

  alert:
    build: ./services/alert
    container_name: fire-iot-alert
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ALERT_ENVIRONMENT=local
      - ALERT_KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - ALERT_KAFKA_WARNING_TOPIC=WarningNotificationCreated
      - ALERT_KAFKA_EMERGENCY_TOPIC=EmergencyAlertTriggered
      - ALERT_KAFKA_GROUP_ID=alert-service
      - ALERT_SLACK_WEBHOOK_URL=https://hooks.slack.com/services/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
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    networks:
      - fire-iot-network

  mock-server:
    build: ./services/mock-server
    container_name: fire-iot-mock-server
    ports:
      - "8001:8001"
    networks:
      - fire-iot-network

volumes:
  postgres_datalake_data:
    driver: local
  postgres_facilitymanagement_data:
    driver: local
  redis_data:
    driver: local
  datalake_storage:
    driver: local

networks:
  fire-iot-network:
    driver: bridge
