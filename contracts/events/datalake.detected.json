{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "DataLake Anomaly Detected Event",
  "description": "Event emitted when anomaly is detected in sensor data",
  "type": "object",
  "properties": {
    "event_id": {
      "type": "string",
      "format": "uuid",
      "description": "Unique event identifier"
    },
    "event_type": {
      "type": "string",
      "const": "datalake.detected",
      "description": "Event type identifier"
    },
    "event_version": {
      "type": "string",
      "const": "v1",
      "description": "Event schema version"
    },
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "Event timestamp in ISO8601 UTC format"
    },
    "dedupe_key": {
      "type": "string",
      "description": "Idempotency key: {station_id}:{ts}:{rule_id}"
    },
    "data": {
      "type": "object",
      "properties": {
        "station_id": {
          "type": "string",
          "description": "Station identifier"
        },
        "rule_id": {
          "type": "string",
          "description": "Detection rule identifier"
        },
        "rule_name": {
          "type": "string",
          "description": "Human-readable rule name"
        },
        "detection_type": {
          "type": "string",
          "enum": ["THRESHOLD_EXCEEDED", "ANOMALY_DETECTED", "PATTERN_MATCHED"],
          "description": "Type of detection"
        },
        "severity": {
          "type": "string",
          "enum": ["LOW", "MEDIUM", "HIGH", "CRITICAL"],
          "description": "Detection severity level"
        },
        "confidence": {
          "type": "number",
          "format": "float",
          "minimum": 0.0,
          "maximum": 1.0,
          "description": "Detection confidence score"
        },
        "triggered_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the detection was triggered"
        },
        "sensor_readings": {
          "type": "object",
          "properties": {
            "temperature": {
              "type": "number",
              "format": "float"
            },
            "humidity": {
              "type": "number",
              "format": "float"
            },
            "smoke_level": {
              "type": "number",
              "format": "float"
            },
            "co_level": {
              "type": "number",
              "format": "float"
            }
          },
          "description": "Sensor readings that triggered the detection"
        },
        "thresholds": {
          "type": "object",
          "properties": {
            "temperature_max": {
              "type": "number",
              "format": "float"
            },
            "smoke_level_max": {
              "type": "number",
              "format": "float"
            },
            "co_level_max": {
              "type": "number",
              "format": "float"
            }
          },
          "description": "Thresholds that were exceeded"
        },
        "location": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "number",
              "format": "double"
            },
            "longitude": {
              "type": "number",
              "format": "double"
            },
            "address": {
              "type": "string"
            },
            "building_name": {
              "type": "string"
            },
            "floor": {
              "type": "string"
            },
            "room": {
              "type": "string"
            }
          },
          "required": ["latitude", "longitude"]
        },
        "metadata": {
          "type": "object",
          "additionalProperties": true,
          "description": "Additional detection metadata"
        }
      },
      "required": ["station_id", "rule_id", "rule_name", "detection_type", "severity", "confidence", "triggered_at", "sensor_readings", "location"]
    }
  },
  "required": ["event_id", "event_type", "event_version", "timestamp", "dedupe_key", "data"]
}
