name: Alert CI/CD

on:
  push:
    branches: [main]
    paths:
      - "services/alert/**"
  pull_request:
    branches: [main]
    paths:
      - "services/alert/**"
  workflow_dispatch:

jobs:
  # PR에서는 빌드만 수행
  build-only:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Alert image (PR)
        uses: docker/build-push-action@v5
        with:
          context: ./services/alert
          push: false
          tags: |
            kt-fire-iot-alert:pr-${{ github.event.pull_request.number }}
            kt-fire-iot-alert:${{ github.sha }}
          cache-from: |
            type=gha,scope=alert-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-alert:buildcache
          cache-to: type=gha,mode=max,scope=alert-build

  # Push/Merge에서는 빌드, 푸시, 배포까지 수행
  build-push-deploy:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Alert image
        uses: docker/build-push-action@v5
        with:
          context: ./services/alert
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-alert:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-alert:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-alert:buildcache
          cache-from: |
            type=gha,scope=alert-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-alert:buildcache
          cache-to: |
            type=gha,mode=max,scope=alert-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-alert:buildcache,mode=max

      # 배포 단계 추가
      - name: Deploy Alert service
        run: |
          echo "🚀 Deploying Alert service to Azure Web App Container..."
          echo "📦 Image: ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-alert:${{ github.sha }}"
          echo "⏰ Deployment time: $(date)"

          # Azure Web App Container에 배포
          echo "☁️ Starting deployment to Azure Web App Container..."

                    az webapp config container set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-alert \
            --docker-custom-image-name ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-alert:${{ github.sha }} \
            --docker-registry-server-url https://index.docker.io/v1/ \
            --docker-registry-server-user ${{ secrets.DOCKERHUB_USERNAME }} \
            --docker-registry-server-password ${{ secrets.DOCKERHUB_TOKEN }}

          # 배포 상태 확인
          echo "🔍 Checking deployment status..."
          az webapp show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-alert \
            --query "{name:name, state:state, defaultHostName:defaultHostName, lastModifiedTime:lastModifiedTime}" \
            --output table

          echo "✅ Alert service deployment to Azure Web App Container completed successfully!"
