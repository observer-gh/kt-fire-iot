name: DataLake CI/CD

on:
  push:
    branches: [main]
    paths:
      - "services/datalake/**"
  pull_request:
    branches: [main]
    paths:
      - "services/datalake/**"
  workflow_dispatch:

jobs:
  # PR에서는 빌드만 수행
  build-only:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build DataLake API image (PR)
        uses: docker/build-push-action@v5
        with:
          context: ./services/datalake
          file: ./services/datalake/Dockerfile.api
          push: false
          tags: |
            kt-fire-iot-datalake-api:pr-${{ github.event.pull_request.number }}
            kt-fire-iot-datalake-api:${{ github.sha }}
          cache-from: |
            type=gha,scope=datalake-api-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-api:buildcache
          cache-to: type=gha,mode=max,scope=datalake-api-build

      - name: Build DataLake Dashboard image (PR)
        uses: docker/build-push-action@v5
        with:
          context: ./services/datalake
          file: ./services/datalake/Dockerfile.dashboard
          push: false
          tags: |
            kt-fire-iot-datalake-dashboard:pr-${{ github.event.pull_request.number }}
            kt-fire-iot-datalake-dashboard:${{ github.sha }}
          cache-from: |
            type=gha,scope=datalake-dashboard-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-dashboard:buildcache
          cache-to: type=gha,mode=max,scope=datalake-dashboard-build

  # Push/Merge에서는 빌드, 푸시까지 수행
  build-push:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push DataLake API image
        uses: docker/build-push-action@v5
        with:
          context: ./services/datalake
          file: ./services/datalake/Dockerfile.api
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-api:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-api:buildcache
          cache-from: |
            type=gha,scope=datalake-api-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-api:buildcache
          cache-to: |
            type=gha,mode=max,scope=datalake-api-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-api:buildcache,mode=max

      - name: Build and Push DataLake Dashboard image
        uses: docker/build-push-action@v5
        with:
          context: ./services/datalake
          file: ./services/datalake/Dockerfile.dashboard
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-dashboard:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-dashboard:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-dashboard:buildcache
          cache-from: |
            type=gha,scope=datalake-dashboard-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-dashboard:buildcache
          cache-to: |
            type=gha,mode=max,scope=datalake-dashboard-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-dashboard:buildcache,mode=max

      # 배포 단계 추가
      - name: Deploy DataLake services
        run: |
          echo "🚀 Deploying DataLake services to Azure Web App Container..."
          echo "📦 API Image: ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-api:${{ github.sha }}"
          echo "📦 Dashboard Image: ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-dashboard:${{ github.sha }}"
          echo "⏰ Deployment time: $(date)"

          # Azure Web App Container에 배포
          echo "☁️ Starting deployment to Azure Web App Container..."

          # Azure 로그인
          echo "🔐 Logging into Azure..."
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          az login --service-principal \
            --username $(cat azure_credentials.json | jq -r .clientId) \
            --password $(cat azure_credentials.json | jq -r .clientSecret) \
            --tenant $(cat azure_credentials.json | jq -r .tenantId)

          # 구독 설정
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

          # DataLake API 서비스 배포
          echo "🔧 Deploying DataLake API service..."
          az webapp config container set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-datalake-api \
            --container-image-name ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-api:${{ github.sha }} \
            --container-registry-url https://index.docker.io/v1/ \
            --container-registry-user ${{ secrets.DOCKERHUB_USERNAME }} \
            --container-registry-password ${{ secrets.DOCKERHUB_TOKEN }}

          # DataLake Dashboard 서비스 배포
          echo "🎨 Deploying DataLake Dashboard service..."
          az webapp config container set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-datalake-dashboard \
            --container-image-name ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-dashboard:${{ github.sha }} \
            --container-registry-url https://index.docker.io/v1/ \
            --container-registry-user ${{ secrets.DOCKERHUB_USERNAME }} \
            --container-registry-password ${{ secrets.DOCKERHUB_TOKEN }}

          # 서비스들 재시작 (새 이미지 적용)
          echo "🔄 Restarting DataLake services to apply new images..."

          echo "🔄 Restarting DataLake API service..."
          az webapp restart \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-datalake-api

          echo "🔄 Restarting DataLake Dashboard service..."
          az webapp restart \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-datalake-dashboard

          # 재시작 후 잠시 대기
          echo "⏳ Waiting for services to restart..."
          sleep 30

          # 헬스 체크 및 배포 검증
          echo "🏥 Performing health check..."
          HEALTH_CHECK_RETRIES=3
          HEALTH_CHECK_DELAY=10

          # DataLake API 서비스 헬스 체크
          echo "🔍 Checking DataLake API service health..."
          for i in $(seq 1 $HEALTH_CHECK_RETRIES); do
            echo "🔍 API Health check attempt $i/$HEALTH_CHECK_RETRIES..."
            
            API_STATUS=$(az webapp show \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name app-dev-datalake-api \
              --query "state" \
              --output tsv)
            
            if [ "$API_STATUS" = "Running" ]; then
              echo "✅ DataLake API service is running successfully!"
              break
            else
              echo "⚠️ API service status: $API_STATUS"
              if [ $i -lt $HEALTH_CHECK_RETRIES ]; then
                echo "⏳ Waiting $HEALTH_CHECK_DELAY seconds before retry..."
                sleep $HEALTH_CHECK_DELAY
              else
                echo "❌ API service health check failed after $HEALTH_CHECK_RETRIES attempts"
                exit 1
              fi
            fi
          done

          # DataLake Dashboard 서비스 헬스 체크
          echo "🔍 Checking DataLake Dashboard service health..."
          for i in $(seq 1 $HEALTH_CHECK_RETRIES); do
            echo "🔍 Dashboard Health check attempt $i/$HEALTH_CHECK_RETRIES..."
            
            DASHBOARD_STATUS=$(az webapp show \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --name app-dev-datalake-dashboard \
              --query "state" \
              --output tsv)
            
            if [ "$DASHBOARD_STATUS" = "Running" ]; then
              echo "✅ DataLake Dashboard service is running successfully!"
              break
            else
              echo "⚠️ Dashboard service status: $DASHBOARD_STATUS"
              if [ $i -lt $HEALTH_CHECK_RETRIES ]; then
                echo "⏳ Waiting $HEALTH_CHECK_DELAY seconds before retry..."
                sleep $HEALTH_CHECK_DELAY
              else
                echo "❌ Dashboard service health check failed after $HEALTH_CHECK_RETRIES attempts"
                exit 1
              fi
            fi
          done

          echo "✅ All DataLake services health checks passed!"

          # 배포 상태 확인
          echo "🔍 Checking deployment status..."
          echo "📊 DataLake API service status:"
          az webapp show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-datalake-api \
            --query "{name:name, state:state, defaultHostName:defaultHostName, lastModifiedTime:lastModifiedTime}" \
            --output table

          echo "📊 DataLake Dashboard service status:"
          az webapp show \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-datalake-dashboard \
            --query "{name:name, state:state, defaultHostName:defaultHostName, lastModifiedTime:lastModifiedTime}" \
            --output table

          echo "✅ DataLake services deployment to Azure Web App Container completed successfully!"

  # 실패 시 롤백 job
  rollback-on-failure:
    if: failure()
    needs: build-push
    runs-on: ubuntu-latest

    steps:
      - name: Rollback DataLake services
        run: |
          echo "🔄 Rolling back DataLake services due to deployment failure..."

          # Azure 로그인
          echo "🔐 Logging into Azure for rollback..."
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          az login --service-principal \
            --username $(cat azure_credentials.json | jq -r .clientId) \
            --password $(cat azure_credentials.json | jq -r .clientSecret) \
            --tenant $(cat azure_credentials.json | jq -r .tenantId)

          # 구독 설정
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

          # DataLake API 서비스 롤백
          echo "🔄 Rolling back DataLake API service to previous version (latest)..."
          az webapp config container set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-datalake-api \
            --container-image-name ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-api:latest \
            --container-registry-url https://index.docker.io/v1/ \
            --container-registry-user ${{ secrets.DOCKERHUB_USERNAME }} \
            --container-registry-password ${{ secrets.DOCKERHUB_TOKEN }}

          # DataLake Dashboard 서비스 롤백
          echo "🔄 Rolling back DataLake Dashboard service to previous version (latest)..."
          az webapp config container set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-datalake-dashboard \
            --container-image-name ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-datalake-dashboard:latest \
            --container-registry-url https://index.docker.io/v1/ \
            --container-registry-user ${{ secrets.DOCKERHUB_USERNAME }} \
            --container-registry-password ${{ secrets.DOCKERHUB_TOKEN }}

          # 롤백 후 서비스들 재시작
          echo "🔄 Restarting services after rollback..."
          az webapp restart \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-datalake-api

          az webapp restart \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name app-dev-datalake-dashboard

          echo "✅ Rollback completed successfully!"
