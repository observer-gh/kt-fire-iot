name: FacilityManagement CI/CD

on:
  push:
    branches: [main]
    paths:
      - "services/facilitymanagement/**"
  pull_request:
    branches: [main]
    paths:
      - "services/facilitymanagement/**"
  workflow_dispatch:

jobs:
  # PR에서는 빌드만 수행
  build-only:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build FacilityManagement image (PR)
        uses: docker/build-push-action@v5
        with:
          context: ./services/facilitymanagement
          push: false
          tags: |
            kt-fire-iot-facilitymanagement:pr-${{ github.event.pull_request.number }}
            kt-fire-iot-facilitymanagement:${{ github.sha }}
          cache-from: |
            type=gha,scope=facilitymanagement-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-facilitymanagement:buildcache
          cache-to: type=gha,mode=max,scope=facilitymanagement-build

  # Push/Merge에서는 빌드, 푸시까지 수행
  build-push:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push FacilityManagement image
        uses: docker/build-push-action@v5
        with:
          context: ./services/facilitymanagement
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-facilitymanagement:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-facilitymanagement:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-facilitymanagement:buildcache
          cache-from: |
            type=gha,scope=facilitymanagement-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-facilitymanagement:buildcache
          cache-to: |
            type=gha,mode=max,scope=facilitymanagement-build
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-facilitymanagement:buildcache,mode=max

      # 배포 단계 추가
      - name: Deploy FacilityManagement service
        run: |
          echo "🚀 Deploying FacilityManagement service..."
          echo "📦 Image: ${{ secrets.DOCKERHUB_USERNAME }}/kt-fire-iot-facilitymanagement:${{ github.sha }}"
          echo "⏰ Deployment time: $(date)"

          # Docker Compose로 배포
          echo "🐳 Starting deployment with Docker Compose..."

          # 루트 디렉토리에서 facilitymanagement 서비스만 재배포
          docker-compose up -d facilitymanagement

          # 배포 상태 확인
          docker-compose ps facilitymanagement

          echo "✅ FacilityManagement service deployment completed successfully!"
